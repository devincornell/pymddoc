{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>pymddoc</code> Python Package","text":"<p><code>pymddoc</code> is a python package for creating markdown documents with embedded code snippets.</p> <p>See the introduction and documentation for details on getting started.</p>"},{"location":"#installation","title":"Installation","text":"<p><code>pymddoc</code> is not available on PyPI, but can be installed with pip directly from the github repository.</p> <pre><code>pip install git+ssh://git@github.com/devincornell/pymddoc.git@main\n</code></pre>"},{"location":"a-intro/","title":"Introduction","text":"<p><code>pymddoc</code>* is a python package for creating markdown documents with embedded code snippets.</p> <p>*: name is a work in progress</p> <p>Steps for creating a document:</p> <ol> <li>create a .py script that will contain code to generate the document</li> <li>create a <code>DocMaker</code> object by calling <code>Document</code> with desired templates and metadata</li> <li>add markdown using the <code>.markdown()</code> method</li> <li>add code snippets using the context manager returned by the <code>.snippet()</code> method</li> <li>render the document to markdown or html</li> </ol>"},{"location":"a-intro/#open-a-new-document","title":"Open a New Document","text":"<p>The first step in creating a document is to call the <code>Document</code> function, which returns a <code>DocMaker</code> object. This object will be used to create the document. This function takes a number of parameters for metadata, templates, and other configurations. See the API documentation for more details.</p> <pre><code>    import pymddoc\n    doc = pymddoc.Document(\n        title = 'My Document',\n        date = 'Nov 20, 2023',\n    )\n</code></pre>"},{"location":"a-intro/#markdown","title":"Markdown","text":"<p>We can insert markdown using the <code>.markdown()</code> method. Simply pass a string to the method and it will be inserted into the document directly. </p> <p>Note that this is standard markdown, so you may use any features supported by your markdown compiler (pandoc if you use the built-in html renderer).</p> <p>Here I will define a new function and print the result.</p> <pre><code>    doc.markdown('''\n    # example header\n\n    + item 1\n    + item 2\n\n    | col 1 | col 2 |\n    |-------|-------|\n    | a     | b     |\n    | c     | d     |\n    ''')\n</code></pre>"},{"location":"a-intro/#code-snippets","title":"Code Snippets","text":"<p>Create code snippets using the <code>.snippet()</code> method. When executed, it returns a context manager that captures the source code and stdout as a markdown code block (denoted by \"```\").</p> <p>Create the code snippet like the following:</p> <pre><code>    with doc.snippet(inspect.currentframe(), print_stdout=True):\n        def mytestfunc(a, b):\n            return a + b\n        print(mytestfunc(1, 2))\n</code></pre>"},{"location":"a-intro/#output","title":"output:","text":"<pre><code>    &gt;&gt; 3\n</code></pre>"},{"location":"a-intro/#rendering-the-document","title":"Rendering the Document","text":"<p>The document object now contains all the information needed to construct the markdown, including metadata, source code, and stdout of the code snippets. Use the <code>render_markdown()</code> method to render the document to markdown.</p> <pre><code>    print(doc.render_markdown())\n</code></pre>"},{"location":"a-intro/#output_1","title":"output:","text":"<pre><code>    &gt;&gt; ---\n    &gt;&gt; title: My Document\n    &gt;&gt; date: 2023-11-20 00:00:00\n    &gt;&gt; ---\n    &gt;&gt; \n    &gt;&gt; \n    &gt;&gt; # example header\n    &gt;&gt; \n    &gt;&gt; + item 1\n    &gt;&gt; + item 2\n    &gt;&gt; \n    &gt;&gt; | col 1 | col 2 |\n    &gt;&gt; |-------|-------|\n    &gt;&gt; | a     | b     |\n    &gt;&gt; | c     | d     |\n    &gt;&gt; \n    &gt;&gt; \n    &gt;&gt; ```python\n    &gt;&gt;     def mytestfunc(a, b):\n    &gt;&gt;         return a + b\n    &gt;&gt;     print(mytestfunc(1, 2))\n    &gt;&gt; ```\n    &gt;&gt; \n    &gt;&gt; \n    &gt;&gt; \n    &gt;&gt; ```\n    &gt;&gt;     &gt;&gt; 3\n    &gt;&gt; ```\n</code></pre> <p>You can see that the source code and stdout are included in the markdown. The stdout is indented and the source code is stripped of its baseline indentation.</p> <p>Use the <code>render_html()</code> method to render the document to html using pandoc.</p> <pre><code>    print(doc.render_html())\n</code></pre>"},{"location":"a-intro/#output_2","title":"output:","text":"<pre><code>    &gt;&gt; &lt;h1 id=\"example-header\"&gt;example header&lt;/h1&gt;\n    &gt;&gt; &lt;ul&gt;\n    &gt;&gt; &lt;li&gt;item 1&lt;/li&gt;\n    &gt;&gt; &lt;li&gt;item 2&lt;/li&gt;\n    &gt;&gt; &lt;/ul&gt;\n    &gt;&gt; &lt;table&gt;\n    &gt;&gt; &lt;thead&gt;\n    &gt;&gt; &lt;tr class=\"header\"&gt;\n    &gt;&gt; &lt;th&gt;col 1&lt;/th&gt;\n    &gt;&gt; &lt;th&gt;col 2&lt;/th&gt;\n    &gt;&gt; &lt;/tr&gt;\n    &gt;&gt; &lt;/thead&gt;\n    &gt;&gt; &lt;tbody&gt;\n    &gt;&gt; &lt;tr class=\"odd\"&gt;\n    &gt;&gt; &lt;td&gt;a&lt;/td&gt;\n    &gt;&gt; &lt;td&gt;b&lt;/td&gt;\n    &gt;&gt; &lt;/tr&gt;\n    &gt;&gt; &lt;tr class=\"even\"&gt;\n    &gt;&gt; &lt;td&gt;c&lt;/td&gt;\n    &gt;&gt; &lt;td&gt;d&lt;/td&gt;\n    &gt;&gt; &lt;/tr&gt;\n    &gt;&gt; &lt;/tbody&gt;\n    &gt;&gt; &lt;/table&gt;\n    &gt;&gt; &lt;div class=\"sourceCode\" id=\"cb1\"&gt;&lt;pre\n    &gt;&gt; class=\"sourceCode python\"&gt;&lt;code class=\"sourceCode python\"&gt;&lt;span id=\"cb1-1\"&gt;&lt;a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"&gt;&lt;/a&gt;    &lt;span class=\"kw\"&gt;def&lt;/span&gt; mytestfunc(a, b):&lt;/span&gt;\n    &gt;&gt; &lt;span id=\"cb1-2\"&gt;&lt;a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"&gt;&lt;/a&gt;        &lt;span class=\"cf\"&gt;return&lt;/span&gt; a &lt;span class=\"op\"&gt;+&lt;/span&gt; b&lt;/span&gt;\n    &gt;&gt; &lt;span id=\"cb1-3\"&gt;&lt;a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"&gt;&lt;/a&gt;    &lt;span class=\"bu\"&gt;print&lt;/span&gt;(mytestfunc(&lt;span class=\"dv\"&gt;1&lt;/span&gt;, &lt;span class=\"dv\"&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;\n    &gt;&gt; &lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt; 3&lt;/code&gt;&lt;/pre&gt;\n</code></pre> <p>You can see that the output is now html which can be inserted into a larger template. Simply add html tags manually if you wish to create a web page (although it will likely render without).                  </p>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This package offers a powerful interface for compiling markdown documents to a number of other formats using a combination of Pandoc document conversion and the Jinja templating engine with custom functions that can be used to insert tables from CSV or Excel files, insert SVG or PDF images directly, and offer conditional logic for compiling to different document formats.</p> <p>The combination of these three elements offer the following features:</p> <ul> <li> <p>Custom <code>PyMdDoc</code> functions usable from Jinja</p> <ul> <li>Insert tables directly from CSV or Excel files.</li> <li>Convert SVG or PDF files to PNG for compilation.</li> </ul> </li> <li> <p>Jinja templating engine</p> <ul> <li>Add comments</li> <li>Provide and call custom functions</li> <li>Use conditionals, loops and other control structures</li> </ul> </li> <li> <p>Pandoc document converter</p> <ul> <li>Extract and modify YAML header metadata</li> <li>Code snippet supports</li> <li>Citations from bibtex files using Citeproc</li> <li>Specify id, class, and other html elements</li> </ul> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install the latest version of <code>PyMdDoc</code> using pip:</p> <pre><code>pip install git+https://github.com/devincornell/pymddoc.git@main\n</code></pre>"},{"location":"#command-line-interface-overview","title":"Command-line Interface Overview","text":"<p>There are two main commands available in the command-line interface: <code>metadata</code> and <code>render</code>.</p> <p>To extract metdata from the markdown YAML header, use the <code>metadata</code> command.</p> <pre><code>python -m pymddoc metadata file.md\n</code></pre> <p>Use the <code>render</code> command to render the markdown using jinja and then compile using pandoc. This is great when you aren't planning to do anything exceptional with the markdown.</p> <pre><code>python -m pymddoc render --help\n</code></pre> <pre><code>Usage: python -m pymddoc render [OPTIONS] MD_FILE OUT_FILE\n\n  Render and compile a markdown file.\n\nOptions:\n  --out_format [html|pdf|docx]\n  --strict_render BOOLEAN\n  --help                        Show this message and exit.\n</code></pre>"},{"location":"#python-api-overview","title":"Python API Overview","text":"<p>The process of compiling your markdown document involves several steps.</p> <ol> <li>Author the markdown document.</li> <li>Read the markdown from a file or string.</li> <li> <p>Use a compile function from within <code>pymddoc</code>.</p> <p>a. First, render the markdown with Jinja.</p> <p>b. Then, compile the markdown with Pandoc.</p> </li> </ol>"},{"location":"#1-create-the-markdown-document","title":"1. Create the Markdown Document","text":"<p>First, create a markdown document with the document content and links to images.</p> <pre><code>    ---\n    title: Example Markdown\n    author: John Doe\n    date: 2021-01-01\n    bibliography: [\"data/references.bib\"]\n    ---\n\n    ## Supported by Jinja\n\n    {# this is a Jinja comment #}\n\n    The `OUTPUT_FORMAT` variable allows you to write output format-specific content.\n\n    {% if OUTPUT_FORMAT == 'html' %}\n    This is an HTML document.\n    {% else %}\n    This is not an HTML document.\n    {% endif %}\n\n\n    ## Custom `PyMdDoc` Functions\n\n    ### Insert Tables from CSV or Excel Files\n\n    These built-in functions will accomplish this.\n\n    {{csv_to_markdown('data/testtable.csv')}}\n\n    {{excel_to_markdown('data/testtable.xlsx')}}\n\n\n    ### Insert SVG or PDF Images\n\n    {{svg_to_png('data/testimage.svg')}}\n\n    {{pdf_to_png('data/testimage.pdf')}}\n\n\n    ## Pandoc Compilation\n\n    Any pandoc features are allowed.\n\n    ### Citations\n\n    Use citations like this [@Angelou1969] or this [-@Cohen1963]. The bib file is provided in the compile function.\n\n    ### Code Snippets\n\n    You can also use code snippets:\n\n        ```python\n        def example_function():\n            return \"Hello, world!\"\n        ```\n\n    ### Custom HTML\n\n    ::: { #favorite .note font-size=\"1.5em\" }\n    You can also create Div blocks with ids, classes, and other attributes.\n    :::\n</code></pre>"},{"location":"#2-read-the-markdown-document","title":"2. Read the Markdown Document","text":"<p>Next read the file into the <code>MarkdownDoc</code> object. You load it as a file or a string.</p> <pre><code>doc = pymddoc.MarkdownDoc.from_str('file.md')\n</code></pre> <p>This is the string version:</p> <pre><code>doc = pymddoc.MarkdownDoc.from_str('this is a markdown string!')\n</code></pre> <p>You can extract metadata as a dict using the following function:</p> <pre><code>doc.extract_metadata()\n</code></pre>"},{"location":"#3-compile-the-markdown-document","title":"3. Compile the Markdown Document","text":"<p>Next, render the file to the desired format. This will render the Jinja templates and functions.</p> <p>The HTML can be output as a string or a file. Use this function to render the markdown to a string:</p> <pre><code>html = doc.render_to_string('html')\n</code></pre> <p>As a shortcut, you can use the <code>render_html</code> function.</p> <pre><code>html = doc.render_html()\n</code></pre> <p>When compiling pdf or docx files, you can use the <code>render_to_file</code> function. It will automatically infer output format from the file extension.</p> <pre><code>doc.render_to_file('output.pdf')\n</code></pre> <p>Same goes for compiling to docx.</p> <pre><code>doc.render_to_file('output.docx')\n</code></pre> <p>Same goes for compiling to docx.</p> <pre><code>doc.render_to_file('output.docx')\n</code></pre> <p>You can also call type-specific functions for rendering to specific formats.</p> <pre><code>doc.render_to_docx('output.docx')\ndoc.render_to_pdf('output.pdf')\n</code></pre> <p>You can use the <code>vars</code> arugment to pass variables to the Jinja template, and pass a <code>PandocArgs</code> object to the render functions to have more control over the Pandoc conversion.</p> <pre><code>doc.render_to_pdf(\n    output_path=f'output.pdf',\n    vars={'text_here': 'Hello, world!'},\n    pandoc_args = pymddoc.PandocArgs(\n        toc = True,\n        embed_resources=True,\n        extra_args=['--mathjax'],\n    )\n)\n</code></pre> <p>See the Python API Documentation for more information!</p>"},{"location":"0-commands/","title":"Command-line Interface","text":"<p>The command-line interface is sufficient for cases where you do not need to include custom functions in your code. Docs for the ipynb conversion commands can be seen in the section on that topic, and here I will cover <code>render</code> and <code>metadata</code> commands.</p> <p>Like most command line interfaces, you can use the <code>--help</code> flag to get a list of available commands.</p> <pre><code>python -m pymddoc --help\n</code></pre> <p>output: <pre><code>Usage: python -m pymddoc [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n--help  Show this message and exit.\n\nCommands:\nmetadata        Extract metadata from a markdown file as json.\nrender          Render and compile a markdown file.\nipynb2md        Convert a Jupyter notebook (json file) to a markdown file.\nipynb2md-multi  Convert multiple Jupyter notebooks (json files) to markdown files.\n</code></pre></p>"},{"location":"0-commands/#extract-yaml-header-metadata-from-markdown-files-metadata","title":"Extract YAML header metadata from markdown files: <code>metadata</code>","text":"<p>This command will output formatted JSON that includes the yaml header information from the markdown file. This is useful for debugging and taking a quick look at markdown files.</p> <pre><code>python -m pymddoc metadata --help\n</code></pre>"},{"location":"0-commands/#render-markdown-files-render","title":"Render markdown files: <code>render</code>","text":"<p>This command will render the markdown file using jinja and compile the rendered file to the desired format (html, pdf, or docx). This allows you to use all of the built-in functions and features of <code>pymddoc</code> without writing any code.</p> <pre><code>python -m pymddoc render --help\n</code></pre> <p>output: <pre><code>Usage: python -m pymddoc render [OPTIONS] MD_FILE OUT_FILE\n\n  Render and compile a markdown file.\n\nOptions:\n  --out_format [html|pdf|docx]\n  --strict_render BOOLEAN\n  --help                        Show this message and exit.\n</code></pre></p>"},{"location":"a-api_introduction/","title":"API Introduction","text":"<p>This page describes the API of the <code>PyMdDoc</code> package.</p> <p>The <code>MarkdownDoc</code> class maintains the main interface for creating documents. It manages a single markdown document which can be rendered and converted to another document type. It can be created from a string using <code>from_str()</code> or a file using <code>from_file()</code>.</p> <pre><code>import sys\nsys.path.append('..')\nimport pymddoc\n</code></pre> <p>I will use this functions to make html outputs more readable.</p> <pre><code>def print_formatted_html(html_string):\n    '''Print HTML that is formatted with indentation.'''\n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(html_string, 'html.parser')\n    clean_html = soup.prettify()\n    print(clean_html)\n</code></pre>"},{"location":"a-api_introduction/#ingest-markdown-documents","title":"Ingest Markdown Documents","text":"<p>The following example demonstrates how to create a simple markdown document.</p> <pre><code>example_markdown = '''\n---\ntitle: Example Markdown\nauthor: John Doe\ndate: 2021-01-01\n---\n\n{# this is a jinja comment #}\n\n# Header 1\n\nYou can use italics and bold text as supported by pandoc.\n\n::: { #favorite .note font-size=\"1.5em\" }\nYou can also create Div blocks with ids, attributes, and other attributes.\n:::\n\nYou can also use code snippets:\n\n```python\n    def example_function():\n        return \"Hello, world!\"\n```.\n&lt;br/&gt;\n'''.strip()\n\ndoc = pymddoc.MarkdownDoc.from_str(example_markdown)\nprint(doc)\n</code></pre> <p>stdout:</p> <pre><code>MarkdownDoc({'author': 'John Doe', 'date': '2021-01-01', 'title': 'Example Markdown'})\n</code></pre> <p>You can extract the YAML header metadata from the document using the <code>extract_metadata()</code> method. This method returns a dictionary of the metadata from the document.</p> <pre><code>doc.extract_metadata()\n</code></pre> <p>text:</p> <pre><code>{'author': 'John Doe', 'date': '2021-01-01', 'title': 'Example Markdown'}\n</code></pre>"},{"location":"a-api_introduction/#rendering-documents","title":"Rendering Documents","text":"<p>There are several different methods for rendering markdown documents to other document types.</p> <p>You can use the method <code>render_to_string()</code> to convert the document to any text-based format.</p> <pre><code>html = doc.render_to_string('html')\nprint_formatted_html(html)\n</code></pre> <p>stdout:</p> <pre><code>&lt;h1 id=\"header-1\"&gt;\n Header 1\n&lt;/h1&gt;\n&lt;p&gt;\n You can use italics and bold text as supported by pandoc.\n&lt;/p&gt;\n&lt;div class=\"note\" data-font-size=\"1.5em\" id=\"favorite\"&gt;\n &lt;p&gt;\n  You can also create Div blocks with ids, attributes, and other\nattributes.\n &lt;/p&gt;\n&lt;/div&gt;\n&lt;p&gt;\n You can also use code snippets:\n&lt;/p&gt;\n&lt;p&gt;\n &lt;code&gt;\n  python     def example_function():         return \"Hello, world!\"\n &lt;/code&gt;\n .\n &lt;br/&gt;\n&lt;/p&gt;\n</code></pre> <p>To convert to pdf or docx formats, you will want to write to a file. In this case, you can use the <code>render_to_file()</code> method. It can automatically infer the file type using the file extension.</p> <pre><code>import tempfile\nwith tempfile.TemporaryDirectory() as tempdir:\n\n    doc.render_to_file(f'{tempdir}/test.pdf')\n</code></pre> <p>There are also some type-specific methods for rendering html, pdf, or docx files.</p> <pre><code>with tempfile.TemporaryDirectory() as tempdir:\n\n    doc.render_to_pdf(f'{tempdir}/test.pdf')\n    doc.render_to_docx(f'{tempdir}/test.docx')\n    html = doc.render_html()\nprint_formatted_html(html)\n</code></pre> <p>stdout:</p> <pre><code>&lt;h1 id=\"header-1\"&gt;\n Header 1\n&lt;/h1&gt;\n&lt;p&gt;\n You can use italics and bold text as supported by pandoc.\n&lt;/p&gt;\n&lt;div class=\"note\" data-font-size=\"1.5em\" id=\"favorite\"&gt;\n &lt;p&gt;\n  You can also create Div blocks with ids, attributes, and other\nattributes.\n &lt;/p&gt;\n&lt;/div&gt;\n&lt;p&gt;\n You can also use code snippets:\n&lt;/p&gt;\n&lt;p&gt;\n &lt;code&gt;\n  python     def example_function():         return \"Hello, world!\"\n &lt;/code&gt;\n .\n &lt;br/&gt;\n&lt;/p&gt;\n</code></pre>"},{"location":"a-api_introduction/#jinja-templating-features","title":"Jinja Templating Features","text":"<p>You can pass variables to be inserted in the markdown document using Jinja templating with the <code>vars</code> argument to most render functions.</p> <pre><code>d = pymddoc.MarkdownDoc.from_str('{{ text_here }}')\nhtml = d.render_html(vars={'text_here': 'Hello, world!'})\nprint_formatted_html(html)\n</code></pre> <p>stdout:</p> <pre><code>&lt;p&gt;\n Hello, world!\n&lt;/p&gt;\n</code></pre> <p>While Pandoc supports a number of output formats, it is necessarily inconsistent in how it renders various elements of the document. Using the <code>OUTPUT_FORMAT</code> constant available through <code>PyMdDoc</code>, you can conditionally render elements based on the output format. </p> <pre><code>example_markdown = '''\n{% if OUTPUT_FORMAT == 'html' %}\nThis is an HTML document.\n{% else %}\nThis is not an HTML document.\n{% endif %}\n'''.strip()\n\ndoc = pymddoc.MarkdownDoc.from_str(example_markdown)\nprint(doc.render_html())\n</code></pre> <p>stdout:</p> <pre><code>&lt;p&gt;This is an HTML document.&lt;/p&gt;\n</code></pre>"},{"location":"a-api_introduction/#pandoc-arguments","title":"Pandoc Arguments","text":"<p>You can use the <code>pandoc_args</code> argument to pass additional arguments to the pandoc command from any render function. This can be useful for specifying the output format or other options.</p> <p>Pass arguments using the <code>PandocArgs</code> dataclass. The docstring of that class contains a list of all the available arguments.</p> <pre><code>print(pymddoc.PandocArgs.__doc__)\n</code></pre> <p>stdout:</p> <pre><code>Dataclass that contains arguments for pandoc conversion.\n        See this page for more about pandoc markdown:\n            https://quarto.org/docs/authoring/markdown-basics.html\n    Args:\n        standalone: adds the --standalone flag to the pandoc command.\n        embed_resources: adds the --embed-resources flag to the pandoc command.\n        toc: adds the --toc flag to the pandoc command.\n        citeproc_bibliography: adds the --citeproc and --bibliography {fname}\n            arguments to the pandoc command.\n        template: adds the --template={fname} argument to the pandoc command.\n        extra_args: additional arguments to add to the pandoc command.\n        **pandoc_kwargs: passed to pandoc.\n</code></pre> <p>And you can pass it as an argument to any render function.</p> <pre><code>with tempfile.TemporaryDirectory() as tempdir:\n\n    doc.render_to_pdf(\n        output_path=f'{tempdir}/test.pdf',\n        pandoc_args = pymddoc.PandocArgs(\n            toc = True,\n            embed_resources=True,\n            extra_args=['--mathjax'],\n        )\n    )\n</code></pre> <p>See other pages for examples of using custom functions within the markdown document.</p>"},{"location":"b-tables_and_figures/","title":"Inserting Table and Figure Data","text":"<p>Translating results of analyses to tables and figures in documents often involves multiple steps, and this package provides some functionality to streamline that process. This functionality is provided through functions that the Jinja templating engine has access to.</p> <ul> <li>Translate table data in CSV or Excel format to Markdown for inclusion in the document.</li> <li>Convert Vector graphic files to PNG format for inclusion in the document.</li> </ul> <pre><code>import sys\nsys.path.append('..')\nimport pymddoc\n\nimport tempfile\n</code></pre>"},{"location":"b-tables_and_figures/#useful-constants","title":"Useful Constants","text":"<p>First, it is worth mentioning some defined constants that can be helpful for composing documents. Use them as you would any other Jinja variable.</p> <ul> <li>OUTPUT_FORMAT: the output format type of the document.</li> <li>HOME_DIR: the home directory of the computer where you're rendering the document.</li> </ul> <pre><code>example_markdown = '''\nDocument format: {{OUTPUT_FORMAT}}\n\nHome directory: {{HOME_DIR}}\n'''.strip()\n\ndoc = pymddoc.MarkdownDoc.from_str(example_markdown)\nprint(doc.render_html())\n</code></pre> <p>stdout:</p> <pre><code>&lt;p&gt;Document format: html&lt;/p&gt;\n&lt;p&gt;Home directory: /home/devin&lt;/p&gt;\n</code></pre> <p>While Pandoc supports a number of output formats, it is necessarily inconsistent in how it renders various elements of the document. Using the <code>OUTPUT_FORMAT</code> constant, you can conditionally render elements based on the output format. </p> <pre><code>example_markdown = '''\n{% if OUTPUT_FORMAT == 'html' %}\nThis is an HTML document.\n{% else %}\nThis is not an HTML document.\n{% endif %}\n'''.strip()\n\ndoc = pymddoc.MarkdownDoc.from_str(example_markdown)\nprint(doc.render_html())\n</code></pre> <p>stdout:</p> <pre><code>&lt;p&gt;This is an HTML document.&lt;/p&gt;\n</code></pre>"},{"location":"b-tables_and_figures/#insert-tables","title":"Insert Tables","text":"<p>There are two methods for inserting tables into your documents: <code>csv_to_markdown</code> and <code>excel_to_markdown</code>. Both methods read a file from disk and insert it into the document as markdown.</p> <pre><code>print(pymddoc.excel_to_markdown.__doc__)\n</code></pre> <p>stdout:</p> <pre><code>Read an excel file from disk and insert it into the document as markdown.\n    Args:\n        fname: str: The file name to read.\n        num_rows: int | None: The number of rows to read.\n        read_kwargs: dict[str,typing.Any] | None: The keyword arguments to pass to the read\n            function.\n        to_markdown_kwargs: dict[str,typing.Any] | None: The keyword arguments to pass to the\n</code></pre> <pre><code>print(pymddoc.csv_to_markdown.__doc__)\n</code></pre> <p>stdout:</p> <pre><code>Read a csv file from disk and insert it into the document as markdown.\n    Args:\n        fname: str: The file name to read.\n        num_rows: int | None: The number of rows to read.\n        read_kwargs: dict[str,typing.Any] | None: The keyword arguments to pass to the read\n            function.\n        to_markdown_kwargs: dict[str,typing.Any] | None: The keyword arguments to pass to the\n</code></pre> <p>Call them from within the markdown document.</p> <pre><code>example_markdown = '''\n{{csv_to_markdown('../tests/test_data/testtable.csv', num_rows=2)}}\n'''.strip()\n\ndoc = pymddoc.MarkdownDoc.from_str(example_markdown)\nprint(doc.render_html())\n</code></pre> <p>stdout:</p> <pre><code>&lt;table&gt;\n&lt;thead&gt;\n&lt;tr class=\"header\"&gt;\n&lt;th style=\"text-align: left;\"&gt;name&lt;/th&gt;\n&lt;th style=\"text-align: right;\"&gt;number&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr class=\"odd\"&gt;\n&lt;td style=\"text-align: left;\"&gt;one&lt;/td&gt;\n&lt;td style=\"text-align: right;\"&gt;1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr class=\"even\"&gt;\n&lt;td style=\"text-align: left;\"&gt;two&lt;/td&gt;\n&lt;td style=\"text-align: right;\"&gt;2&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"b-tables_and_figures/#embed-vector-graphics","title":"Embed Vector Graphics","text":"<p>While it is possible to embed vector graphic types such as SVG and PDF into documents using additional software, the following built-in methods will convert these file types to PNG and embed them directly into the document when it is rendered. This is ideal for cases where you want to embed outputs from analyses for publication, and it is all controlled within the markdown document - even the DPI of the output image.</p> <pre><code>print(pymddoc.svg_to_png.__doc__)\n</code></pre> <p>stdout:</p> <pre><code>Convert an svg file to a png file stored in /tmp for pandoc compilation.\n    Args:\n        url: str: The url of the svg file to convert.\n        dpi: int: The dpi of the output image.\n        kwargs: dict: Additional keyword arguments to pass to cairosvg.svg2png().\n</code></pre> <pre><code>print(pymddoc.pdf_to_png.__doc__)\n</code></pre> <p>stdout:</p> <pre><code>Convert a pdf file to a png file stored in /tmp for pandoc compilation.\n    Args:\n        filename: str: The filename of the pdf file to convert.\n        pageno: int: The page number of the svg file to convert.\n        dpi: int: The dpi of the output image.\n        kwargs: dict: Additional keyword arguments to pass to page.get_pixmap().\n</code></pre> <p>Call them from within the markdown document.</p> <pre><code>example_markdown = '''\n{# embed the pdf as a png. This one is on the web. #}\n![]({{svg_to_png(\"https://storage.googleapis.com/public_data_09324832787/static_factory_methods.svg\", dpi=150)}})\n\n{# embed the pdf as a png #}\n![]({{pdf_to_png(\"../tests/test_data/drawing.pdf\", dpi=150)}})\n\n{# embed the pdf directly. This also works. #}\n![](../tests/test_data/drawing.pdf)\n'''.strip()\n\ndoc = pymddoc.MarkdownDoc.from_str(example_markdown)\n\nwith tempfile.TemporaryDirectory() as tmpdirname:\n    doc.render_to_pdf(f'{tmpdirname}/output.pdf')\n</code></pre>"},{"location":"c-citations/","title":"Citations and Bibliography","text":"<p>Part of the motivation for using <code>Pandoc</code> for this package was that it supports citations and bibliographies through citeproc. Given a markdown document with citations in it and a <code>.bib</code> file, <code>Pandoc</code> can generate a formatted document with citations and a bibliography.</p> <p>This package maintains some easy-to-use functions for working with citations and bibliographies in markdown documents.</p> <pre><code># for demonstration\nimport tempfile\nfrom IPython.core.display import display, HTML\n\nimport sys\nsys.path.append('..')\nimport pymddoc\n</code></pre> <p>stderr:</p> <pre><code>/tmp/ipykernel_1016843/3729719973.py:3: DeprecationWarning: Importing display from IPython.core.display is deprecated since IPython 7.14, please import from IPython display\n  from IPython.core.display import display, HTML\n</code></pre>"},{"location":"c-citations/#citation-auto-complete","title":"Citation Auto-complete","text":"<p>Check out the pandoc citer VSCode plugin for citation auto-complete as you edit your documents.</p> <p>In the document YAML header, you will need to provide the bibliography attribute.</p> <pre><code>markdown_text = '''\n---\ntitle: \"Hello World\"\nbibliography: [\"data/references.bib\"]\n---\nUse citations like this [@Angelou1969] or this [-@Cohen1963]. These will auto-complete if you use the VSCode plugin.\n'''.strip()\n</code></pre>"},{"location":"c-citations/#compiling-documents-with-citations","title":"Compiling Documents with Citations","text":"<p>Most importantly for our purposes, we should be able to compile a document that includes citations automatically from a database. We can do this by specifying the <code>citeproc_bibliography</code> argument in <code>PandocArgs</code>. This argument should be a path to a <code>.bib</code> file.</p> <p>In this example I write the bibtex data to a temporary file which is then used to compile the document.</p> <pre><code>bib_file_text = '''\n@book{Angelou1969,\n    place={New York},\n    edition={1},\n    title={I Know Why the Caged Bird Sings},\n    ISBN={9780375507892},\n    publisher={Random House},\n    author={Angelou, Maya},\n    year={1969},\n    month={Jan.}\n}\n@article{Cohen1963,\n    author = \"P. J. Cohen\",\n    title = \"The independence of the continuum hypothesis\",\n    journal = \"Proceedings of the National Academy of Sciences\",\n    year = 1963,\n    volume = \"50\",\n    number = \"6\",\n    pages = \"1143--1148\",\n}\n'''\n\nmd_file_text = '''\nUse citations like this [@Angelou1969] or this [-@Cohen1963].\n'''.strip()\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    bib_fname = tmpdir + '/refs.bib'\n    with open(bib_fname, 'w') as f:\n        f.write(bib_file_text)\n\n\n    doc = pymddoc.MarkdownDoc.from_str(md_file_text)\n    html = doc.render_html(\n        pandoc_args=pymddoc.PandocArgs(\n            citeproc_bibliography=bib_fname,\n        )\n    )\ndisplay(HTML(html))\n</code></pre> <p>text:</p> <pre><code>&lt;IPython.core.display.HTML object&gt;\n</code></pre> <p>html:</p> <pre><code>&lt;p&gt;Use citations like this &lt;span class=\"citation\"\ndata-cites=\"Angelou1969\"&gt;(Angelou 1969)&lt;/span&gt; or this &lt;span\nclass=\"citation\" data-cites=\"Cohen1963\"&gt;(1963)&lt;/span&gt;.&lt;/p&gt;\n&lt;div id=\"refs\" class=\"references csl-bib-body hanging-indent\"\nrole=\"doc-bibliography\"&gt;\n&lt;div id=\"ref-Angelou1969\" class=\"csl-entry\" role=\"doc-biblioentry\"&gt;\nAngelou, Maya. 1969. &lt;em&gt;I Know Why the Caged Bird Sings&lt;/em&gt;. 1st ed.\nRandom House.\n&lt;/div&gt;\n&lt;div id=\"ref-Cohen1963\" class=\"csl-entry\" role=\"doc-biblioentry\"&gt;\nCohen, P. J. 1963. &lt;span&gt;\u201cThe Independence of the Continuum\nHypothesis.\u201d&lt;/span&gt; &lt;em&gt;Proceedings of the National Academy of\nSciences&lt;/em&gt; 50 (6): 1143\u201348.\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>You can change the bibtex file if you have any issues with the citation information.</p>"},{"location":"d-ipynb2md/","title":"Jupyter notebooks to Markdown","text":"<p>Another feature of this package is the ability to convert Jupyter notebooks to markdown files. There are both command-line and Python API interfaces for this functionality.</p>"},{"location":"d-ipynb2md/#command-line-interface","title":"Command-line interface","text":"<p>To convert a single Jupyter notebook to a markdown file, use the <code>ipynb2md</code> command.</p> <pre><code>python -m pymddoc ipynb2md --help\n</code></pre> <p>output: <pre><code>Usage: python -m pymddoc ipynb2md [OPTIONS] IPYNB_FILE MD_FILE\n\n  Convert a Jupyter notebook (json file) to a markdown file. Description:\n  reads a jupyter notebook as a regular json file, passes the json to the\n  template,     and renders the template with the json information.\n\nOptions:\n  --template PATH\n  --help           Show this message and exit.\n</code></pre></p>"},{"location":"d-ipynb2md/#multiple-notebooks","title":"Multiple notebooks","text":"<p>To convert multiple Jupyter notebooks to markdown files, use the <code>ipynb2md-multi</code> command.</p> <pre><code>python -m pymddoc ipynb2md-multi --help\n</code></pre> <p>output: <pre><code>Usage: python -m pymddoc ipynb2md-multi [OPTIONS] [IPYNB_FILES]...\n\n  Convert multiple Jupyter notebooks (json files) to markdown files.\n\nOptions:\n  --template PATH\n  --help           Show this message and exit.\n</code></pre></p>"},{"location":"d-ipynb2md/#python-api","title":"Python API","text":"<p>You may also access this functionality within Python.</p> <pre><code>import os\nimport sys\nsys.path.append('../src/')\nimport pymddoc\n</code></pre>"},{"location":"d-ipynb2md/#the-convert_ipynb2md-function","title":"The <code>convert_ipynb2md</code> function","text":"<p>You can convert a single Jupyter notebook to a markdown file by running the <code>convert_ipynb2md</code> function. This function takes advantage of the fact that jupyter notbebooks are stored as json files, and is essentially passes the json to the template, and renders the template with the json information.</p> <pre><code>use_template = pymddoc.ipynb2md_default_template\n\nimport json\nwith open('../tests/example.ipynb', 'r') as f:\n    ipynb_json = json.load(f)\n\nmarkdown = pymddoc.convert_ipynb2md(use_template, ipynb_json).split('\\n\\n\\n')\nprint(\"\\n\".join(markdown))\n</code></pre> <p>stdout:</p> <pre><code># Hello world!\n\n\n---\n\n``` python linenums=\"1\"\nimport os\nos\n```\n---\n\n---\n\n``` python linenums=\"1\"\n\n```\n---\n</code></pre>"},{"location":"d-ipynb2md/#more-on-templates","title":"More on Templates","text":"<p>As most of the heavy-lifting in this method is done by the jinja template, you can customize the output by modifying the template. The default template can be accessed via the <code>ipynb2md_default_template</code> variable or from <code>templates['ipynb2md_default']</code>. You can use this as a starting point for writing your own template.</p> <pre><code>pymddoc.templates['ipynb2md_default']\nprint(pymddoc.ipynb2md_default_template)\n</code></pre> <p>stdout:</p> <pre><code>{% for cell in cells %}\n{% if cell.cell_type == 'markdown' %}\n{{ cell.source|join(\"\") }}\n{% elif cell.cell_type == 'code' %}\n\n---\n\n``` python linenums=\"1\"\n{{ cell.source|join(\"\") }}\n```\n{% for output in cell.outputs%}\n{%if output.output_type == 'stream'%}\n{%if output.name == 'stdout'%}\nstdout:\n{% elif output.name == 'stderr'%}\nstderr:\n{%endif%} {# end if name #}\n\n{{ indent(output.text|join(\"\")) }}\n\n{%elif output.output_type == 'data' or output.output_type == 'display_data' or output.output_type == 'execute_result' %}\n\n{%if 'text/plain' in output.data%}\ntext:\n\n{{ indent(output.data['text/plain']|join(\"\")) }}\n{%endif%} {# end test/plain #}\n\n\n{%if 'text/html' in output.data%}\nhtml:\n\n{{ indent(output.data['text/html']|join(\"\")) }}\n{%endif%} {# end if text/html #}\n\n\n{%endif%} {# end if output_type #}\n\n{%endfor%}\n\n---\n\n{% endif %}\n{% endfor %} {# end for cells #}\n</code></pre>"}]}